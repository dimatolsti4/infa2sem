#include <iostream>

using namespace std;

typedef struct Node {
    int value;
    struct Node *next;
} Node;

void push_left(Node ** head, int value)
{
    if (*head == NULL)
    {
        *head = (Node*)malloc(sizeof(Node));
        (**head)->value = value;
        (*head)->next = NULL;
    }
    else
    {
        Node* new_node;
        new_node->value = value;
        new_node->next = *head;
        *head = new_node;
    }
}

void clear_list(Node ** head)
{
    if (*head == NULL)
    {
        return;
    }
    Node* last_node;
    Node* prelast_node;
    prelast_node = *head;
    while (last_node->next != NULL)
    {
        last_node = prelast_node;
        prelast_node = prelast_node->next;
        free(last_node);
    }
    *head = NULL;
}

int pop(Node ** head, int index)
{
    int number = -1;
    if (*head != NULL)
    {
        Node* current = *head;
        if (index != 0)
        {
            Node* previous = *head;
            for (int i = 0; i < index && current->next != NULL; i++)
            {
                previous = current;
                current = current->next;
            }
            number = current->value;
            previous->next = current->next;
        }
        else
        {
            number = (*head)->value;
            *head = (*head)->next;
        }
        free(current)
    }
    return number;
}

void node_remove(Node ** head, int value)
{
    if (head != NULL)
    {
        Node* current = *head;
        Node* previous = *head;
        while (current->value != value && current->next != NULL)
        {
            previous = current;
            current = current->next;
        }
        if (current->value != value)
        {
            return;
        }
        if (current = *head)
        {
            *head = (*head)->next;
        }
        previous->next = current->next;
        free(current);
        return;
    }
    return;
}

void replace_all(Node * head, int old_value, int new_value)
{
    if (head != NULL)
    {
        node* current = head;
        if (current->value == old_value)
        {
            current->vale = new_value;
        }
        while (current->next != NULL)
        {
            if (current->value == old_value)
            {
                current->value = new_value;
            }
            current = current->next;
        }
    }
    return;
}
